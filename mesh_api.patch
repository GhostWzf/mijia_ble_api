diff --git a/rtk_common.c b/rtk_common.c
new file mode 100644
index 0000000..d75e4b8
--- /dev/null
+++ b/rtk_common.c
@@ -0,0 +1,70 @@
+/**
+*********************************************************************************************************
+*               Copyright(c) 2018, Realtek Semiconductor Corporation. All rights reserved.
+*********************************************************************************************************
+* @file      rtk_common.c
+* @brief     xiaomi ble common parameters
+* @details   common data types and functions.
+* @author    hector_huang
+* @date      2019-11-18
+* @version   v1.0
+* *********************************************************************************************************
+*/
+#include <stdlib.h>
+#include "rtk_common.h"
+#include <os_msg.h>
+#include <os_task.h>
+#include "mible_api.h"
+#define MI_LOG_MODULE_NAME "RTK_COMMON"
+#include "mible_log.h"
+
+static void *mible_api_event_queue;
+static void *mible_api_io_queue;
+
+static uint8_t mible_api_event = MIBLE_API_EVENT;
+
+extern void mible_handle_timeout(void *timer);
+#if MIBLE_MESH_API
+extern mible_status_t mible_gap_adv_send(void);
+#endif
+
+void mible_api_init(void *pevent_queue, void *pio_queue)
+{
+    mible_api_event_queue = pevent_queue;
+    mible_api_io_queue = pio_queue;
+}
+
+void mible_api_inner_msg_handle(T_IO_MSG *pmsg)
+{
+    switch (pmsg->type)
+    {
+    case MIBLE_API_MSG_TYPE_TIMEOUT:
+        mible_handle_timeout(pmsg->u.buf);
+        break;
+#if MIBLE_MESH_API
+    case MIBLE_API_MSG_TYPE_ADV_TIMEOUT:
+        mible_gap_adv_send();
+        break;
+#endif
+    default:
+        break;
+    }
+}
+
+bool mible_api_inner_msg_send(T_IO_MSG *pmsg)
+{
+    if (!os_msg_send(mible_api_io_queue, pmsg, 0))
+    {
+        MI_LOG_ERROR("failed to send msg to mible api msg queue");
+        return false;
+    }
+
+    /* send event to notify upper layer task */
+    if (!os_msg_send(mible_api_event_queue, &mible_api_event, 0))
+    {
+        MI_LOG_ERROR("failed to send msg to mible api event queue");
+        return false;
+    }
+
+    return true;
+}
diff --git a/rtk_common.h b/rtk_common.h
new file mode 100644
index 0000000..bc96d97
--- /dev/null
+++ b/rtk_common.h
@@ -0,0 +1,39 @@
+/**
+*********************************************************************************************************
+*               Copyright(c) 2018, Realtek Semiconductor Corporation. All rights reserved.
+*********************************************************************************************************
+* @file      rtk_common.c
+* @brief     xiaomi ble common parameters
+* @details   common data types and functions.
+* @author    hector_huang
+* @date      2019-11-18
+* @version   v1.0
+* *********************************************************************************************************
+*/
+#ifndef _RTK_COMMON_H_
+#define _RTK_COMMON_H_
+
+#include <app_msg.h>
+#include <stdbool.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+
+#define MIBLE_API_EVENT                             0xF0
+
+/* mible api inner message type */
+#define MIBLE_API_MSG_TYPE_TIMEOUT                  0x00
+#define MIBLE_API_MSG_TYPE_ADV_TIMEOUT              0x01
+
+void mible_api_init(void *pevent_queue, void *pio_queue);
+bool mible_api_inner_msg_send(T_IO_MSG *pmsg);
+void mible_api_inner_msg_handle(T_IO_MSG *pmsg);
+
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif /* _RTK_COMMON_H_ */
diff --git a/rtk_gap_mesh.c b/rtk_gap_mesh.c
index e23bf70..ea8f22d 100644
--- a/rtk_gap_mesh.c
+++ b/rtk_gap_mesh.c
@@ -22,6 +22,7 @@
 #define MI_LOG_MODULE_NAME "RTK_GAP"
 #include "mible_log.h"
 #include "mesh_api.h"
+#include "rtk_common.h"
 
 static uint8_t rtk_adv_data[31];
 static uint8_t rtk_adv_data_len;
@@ -94,7 +95,6 @@ mible_status_t mible_gap_address_get(mible_addr_t mac)
 mible_status_t mible_gap_scan_start(mible_gap_scan_type_t scan_type,
                                     mible_gap_scan_param_t scan_param)
 {
-    T_GAP_CAUSE err = GAP_CAUSE_SUCCESS;
     uint8_t scan_mode;
     if (MIBLE_SCAN_TYPE_PASSIVE == scan_type)
     {
@@ -108,16 +108,19 @@ mible_status_t mible_gap_scan_start(mible_gap_scan_type_t scan_type,
     le_scan_set_param(GAP_PARAM_SCAN_MODE, sizeof(scan_mode), &scan_mode);
     uint16_t scan_window = scan_param.scan_window;
     uint16_t scan_interval = scan_param.scan_interval;
-    le_scan_set_param(GAP_PARAM_SCAN_INTERVAL, sizeof(scan_interval), &scan_interval);
-    le_scan_set_param(GAP_PARAM_SCAN_WINDOW, sizeof(scan_window), &scan_window);
-    err = le_scan_start();
-    return err_code_convert(err);
+    gap_sched_params_set(GAP_SCHED_PARAMS_SCAN_WINDOW, &scan_window, sizeof(scan_window));
+    gap_sched_params_set(GAP_SCHED_PARAMS_SCAN_INTERVAL, &scan_interval,
+                         sizeof(scan_interval));
+    gap_sched_scan(TRUE);
+    
+    return MI_SUCCESS;
 }
 
 mible_status_t mible_gap_scan_stop(void)
 {
-    T_GAP_CAUSE err = le_scan_stop();
-    return err_code_convert(err);
+    gap_sched_scan(FALSE);
+    
+    return MI_SUCCESS;
 }
 
 mible_status_t mible_gap_adv_send(void)
@@ -144,7 +147,9 @@ mible_status_t mible_gap_adv_send(void)
 
 static void rtk_adv_timeout_handler(void *pargs)
 {
-    rtk_gap_adv_timeout();
+    T_IO_MSG msg;
+    msg.type = MIBLE_API_MSG_TYPE_ADV_TIMEOUT;
+    mible_api_inner_msg_send(&msg);
 }
 
 mible_status_t mible_gap_adv_start(mible_gap_adv_param_t *p_param)
diff --git a/rtk_os.c b/rtk_os.c
index 19b52b8..e2bd10f 100644
--- a/rtk_os.c
+++ b/rtk_os.c
@@ -15,6 +15,7 @@
 #include "platform_types.h"
 #define MI_LOG_MODULE_NAME "RTK_OS"
 #include "mible_log.h"
+#include "rtk_common.h"
 
 #define DEFAULT_TIME_INTERVAL   0xFFFFFF
 #define MAX_TIMER_CONTEXT       10
@@ -29,6 +30,14 @@ typedef struct
 static timer_context_t timer_context[MAX_TIMER_CONTEXT];
 
 static void mi_timeout_handler(void *timer)
+{
+    T_IO_MSG msg;
+    msg.type = MIBLE_API_MSG_TYPE_TIMEOUT;
+    msg.u.buf = timer;
+    mible_api_inner_msg_send(&msg);
+}
+
+void mible_handle_timeout(void *timer)
 {
     for (uint8_t idx = 0; idx < MAX_TIMER_CONTEXT; ++idx)
     {
